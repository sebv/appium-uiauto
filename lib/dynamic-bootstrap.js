'use strict';

var path = require('path'),
    _ = require('underscore'),
    crypto = require('crypto'),
    Q = require ('q'),
    mkdirp = Q.denodeify(require('mkdirp')),
    fs = require('fs'),
    logger = require('./logger.js');

function toBoolean(val) {
  if (typeof val === 'string') {
    return ['1','true'].indexOf(val.toLowerCase().trim()) >= 0;
  } else {
    return val ? true : false;
  }
}

function buildEnv(opts) {
  var bootstrapEnv = {
    USER: process.env.USER,
    NODE_BIN: process.execPath,
    CWD: process.cwd(),
    INSTRUMENTS_CLIENT_PATH: path.resolve(
      __dirname, '../bin/instruments-client.js'),
    VERBOSE_INSTRUMENTS: opts.verboseInstruments ||
      toBoolean(process.env.VERBOSE_INSTRUMENTS)
  };
  return bootstrapEnv;
}

function buildCode(env, bootstrapJs) {
  var lines = [];
  lines.push('// This file is automatically generated. Do not manually modify!');
  lines.push('');
  lines.push('#import \"' + bootstrapJs + '\";');
  lines.push('');
  lines.push('bootstrap({');
  _(env).each(function (value, key) {
    var quote = typeof value === 'string' ? '\"' : '';
    lines.push('  ' + key + ': ' + quote + value + quote + ',');
  });
  lines.push('});');
  return lines.join('\r\n');
}

function computeHash(code) {
  return crypto.createHash('md5').update(code)
    .digest('hex').substring(0, 16);
}

var prepareBootstrap = function (opts) {
  logger.warn('Preparing uiauto bootstrap');
  opts = opts || {};

  // figuring out where to store dynamic bootstrap
  var dynamicBootstrapDir;
  if (process.env.DYNAMIC_BOOTSTRAP_DIR) {
    // mainly for test
    dynamicBootstrapDir = process.env.DYNAMIC_BOOTSTRAP_DIR;
  } else if (process.env.HOME) {
    dynamicBootstrapDir = path.resolve(process.env.HOME,
      'Library/Application Support/appium/bootstrap');
  } else {
    // no user dir, using tmp
    dynamicBootstrapDir = path.resolve( '/tmp' , 'appium/bootstrap');
  }
  logger.debug('Dynamic bootstrap dir:', dynamicBootstrapDir);

  // building code and hash
  var env = buildEnv(opts);
  logger.debug('Dynamic env:', JSON.stringify(env));
  var bootstrapJs = path.resolve(__dirname,'../uiauto/bootstrap.js');
  var code = buildCode(env, bootstrapJs);
  var hash = computeHash(code);
  var dynamicBootstrapPath = path.resolve(dynamicBootstrapDir,
    'bootstrap-' + hash + '.js');
  logger.debug('Dynamic bootstrap code:', code);
  logger.debug('Dynamic bootstrap path:', dynamicBootstrapPath);

  return mkdirp(dynamicBootstrapDir)
    .then(function () {
      // check existing code
      var codeIsGood = true;
      try {
        var existingCode = fs.readFileSync(dynamicBootstrapPath);
        codeIsGood = computeHash(existingCode) === hash;
      } catch (err) {
        codeIsGood = false;
      }
      // write file if necessary
      if (codeIsGood){
        logger.warn('Reusing dynamic bootstrap:', dynamicBootstrapPath);
      } else {
        logger.warn('Creating or overwritting dynamic bootstrap:', dynamicBootstrapPath);
        fs.writeFileSync(dynamicBootstrapPath, code, { flag: 'w+'});
      }
      return dynamicBootstrapPath;
    });
};
exports.prepareBootstrap = prepareBootstrap;
